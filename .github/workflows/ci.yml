name: Build & Release KISS Elastic Sync

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/klantinteractie-servicesysteem/kiss-elastic-sync
  SHOULD_PUSH: ${{ github.event_name != 'pull_request' }}
  SHOULD_RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}
  IS_LATEST: false
  VERSION: ""
  REVISION: ""

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: "Find the latest release tag (determined by semver sort)"
        id: latest-semver
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          REPO_URL: ${{ github.event.repository.html_url }}
          TAG_FILTER: '^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$'
        run: |
          TAG=$(\
            git ls-remote --exit-code --refs --tags --sort='-v:refname' "$REPO_URL" \
            | awk '{print $2}' | grep -E "$TAG_FILTER" | head -n 1
          )
          echo "tag-ref=${TAG}" >> "$GITHUB_OUTPUT"
          if [ "$TAG" = "${{ github.ref }}" ] ; then
              echo "IS_LATEST=true" >> "$GITHUB_ENV"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: ${{ fromJson(env.SHOULD_PUSH) }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=${{ env.IS_LATEST }}
          images: |
            ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: set version and revision in env
        run: |
          echo "VERSION=${{ fromJson(env.SHOULD_RELEASE) && fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] || '0.0.0' }}" >> "$GITHUB_ENV"
          echo "REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}" >> "$GITHUB_ENV"

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: src/Kiss.Elastic.Sync/Dockerfile
          push: ${{ fromJSON(env.SHOULD_PUSH) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ env.VERSION }}
            REVISION=${{ env.REVISION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
      packages: write

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    - run: dotnet test test/Kiss.Elastic.Sync.IntegrationTest -c Release --logger trx --results-directory ./testresults -v n /p:CollectCoverage=true /p:CoverletOutput=./testresults/ /p:CoverletOutputFormat=lcov
    
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        action_fail: true
        files: |
          testresults/*.trx
          testresults/*.xml
    
    # - name: Publish Coverage
    #   if: github.event_name == 'pull_request'
    #   uses: romeovs/lcov-reporter-action@v0.2.16
    #   with:
    #     lcov-file: ./testresults/coverage.info
    #     github-token: ${{ secrets.GITHUB_TOKEN }}